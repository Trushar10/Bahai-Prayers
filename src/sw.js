import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { ExpirationPlugin } from 'workbox-expiration';

// ✅ Precache static assets generated by Next.js
// This will be replaced by next-pwa at build time
// @ts-expect-error self.__WB_MANIFEST is injected by workbox at build time
precacheAndRoute(self.__WB_MANIFEST || []);

// ✅ Runtime caching for prayers API
registerRoute(
	({ url }) => url.pathname.startsWith('/api/prayers'),
	new StaleWhileRevalidate({
		cacheName: 'prayers-cache',
		plugins: [
			new CacheableResponsePlugin({ statuses: [0, 200] }),
			new ExpirationPlugin({
				maxEntries: 50,
				maxAgeSeconds: 60 * 60 * 24,
			}), // 1 day
		],
	})
);

// ✅ Runtime caching for individual prayer slugs
registerRoute(
	({ url }) => url.pathname.startsWith('/api/prayer/'),
	new StaleWhileRevalidate({
		cacheName: 'prayer-detail-cache',
		plugins: [
			new CacheableResponsePlugin({ statuses: [0, 200] }),
			new ExpirationPlugin({
				maxEntries: 50,
				maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
			}),
		],
	})
);

// ✅ Example: Cache images with CacheFirst
registerRoute(
	({ request }) => request.destination === 'image',
	new CacheFirst({
		cacheName: 'image-cache',
		plugins: [
			new CacheableResponsePlugin({ statuses: [0, 200] }),
			new ExpirationPlugin({
				maxEntries: 100,
				maxAgeSeconds: 60 * 60 * 24 * 30,
			}), // 30 days
		],
	})
);

// ✅ Skip waiting and activate new SW immediately
self.addEventListener('install', () => {
	self.skipWaiting();
});
self.addEventListener('activate', (event) => {
	event.waitUntil(self.clients.claim());
});
