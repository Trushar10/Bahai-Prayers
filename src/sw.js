import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { ExpirationPlugin } from 'workbox-expiration';

// ✅ Precache static assets generated by Next.js
// @ts-expect-error self.__WB_MANIFEST is injected by workbox at build time
precacheAndRoute(self.__WB_MANIFEST || []);

// ✅ Clean up outdated caches
cleanupOutdatedCaches();

// ✅ Cache the main app page with NetworkFirst (offline-friendly)
registerRoute(
	({ url }) => url.pathname === '/' || url.pathname === '',
	new NetworkFirst({
		cacheName: 'app-shell-cache',
		plugins: [
			new CacheableResponsePlugin({ statuses: [0, 200] }),
			new ExpirationPlugin({
				maxEntries: 10,
				maxAgeSeconds: 60 * 60 * 24 * 7, // 1 week
			}),
		],
	})
);

// ✅ Cache dynamic pages with NetworkFirst
registerRoute(
	({ url }) =>
		url.pathname.startsWith('/') && !url.pathname.startsWith('/api/'),
	new NetworkFirst({
		cacheName: 'pages-cache',
		plugins: [
			new CacheableResponsePlugin({ statuses: [0, 200] }),
			new ExpirationPlugin({
				maxEntries: 50,
				maxAgeSeconds: 60 * 60 * 24 * 7, // 1 week
			}),
		],
	})
);

// ✅ Runtime caching for prayers API with CacheFirst for better offline support
registerRoute(
	({ url }) => url.pathname.startsWith('/api/prayers'),
	new CacheFirst({
		cacheName: 'prayers-cache',
		plugins: [
			new CacheableResponsePlugin({ statuses: [0, 200] }),
			new ExpirationPlugin({
				maxEntries: 100,
				maxAgeSeconds: 60 * 60 * 24 * 90, // 90 days for better offline experience
			}),
		],
	})
);

// ✅ Runtime caching for individual prayer slugs with CacheFirst
registerRoute(
	({ url }) => url.pathname.startsWith('/api/prayer/'),
	new CacheFirst({
		cacheName: 'prayer-detail-cache',
		plugins: [
			new CacheableResponsePlugin({ statuses: [0, 200] }),
			new ExpirationPlugin({
				maxEntries: 500,
				maxAgeSeconds: 60 * 60 * 24 * 90, // 90 days
			}),
		],
	})
);

// ✅ Cache images with CacheFirst
registerRoute(
	({ request }) => request.destination === 'image',
	new CacheFirst({
		cacheName: 'image-cache',
		plugins: [
			new CacheableResponsePlugin({ statuses: [0, 200] }),
			new ExpirationPlugin({
				maxEntries: 200,
				maxAgeSeconds: 60 * 60 * 24 * 90, // 90 days
			}),
		],
	})
);

// ✅ Cache Contentful assets with CacheFirst
registerRoute(
	({ url }) => url.origin === 'https://images.ctfassets.net',
	new CacheFirst({
		cacheName: 'contentful-assets-cache',
		plugins: [
			new CacheableResponsePlugin({ statuses: [0, 200] }),
			new ExpirationPlugin({
				maxEntries: 100,
				maxAgeSeconds: 60 * 60 * 24 * 90, // 90 days
			}),
		],
	})
);

// ✅ Cache Google Fonts with CacheFirst
registerRoute(
	({ url }) =>
		url.origin === 'https://fonts.googleapis.com' ||
		url.origin === 'https://fonts.gstatic.com',
	new CacheFirst({
		cacheName: 'google-fonts-cache',
		plugins: [
			new CacheableResponsePlugin({ statuses: [0, 200] }),
			new ExpirationPlugin({
				maxEntries: 10,
				maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
			}),
		],
	})
);

// ✅ Handle installation and activation
self.addEventListener('install', () => {
	console.log('Service Worker installing');
	self.skipWaiting();
});

self.addEventListener('activate', () => {
	console.log('Service Worker activating');
	self.clients.claim();
});

// ✅ Listen for messages from the main thread
self.addEventListener('message', (event) => {
	if (event.data && event.data.type === 'SKIP_WAITING') {
		self.skipWaiting();
	}
});
